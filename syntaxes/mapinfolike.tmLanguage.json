{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "MAPINFOLIKE",
    "patterns": [{ "include": "#outherContextPatterns" }],
    "repository": {
        "basicPatterns": {
            "patterns": [
                { "include": "#comments" },
                { "include": "#strings" },
                { "include": "#numbers" },
                { "include": "#booleans" },
                { "include": "#symbols" }
            ]
        },
        "outherContextPatterns": {
            "patterns": [
                { "include": "#basicPatterns" },
                { "include": "#innerContextes" }
            ]
        },
        "innerContextPatterns": {
            "patterns": [
                { "include": "#basicPatterns" },
                { "include": "#operators" },
                { "include": "#parameters" }
            ]
        },
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.double-slash.mapinfolike",
                    "begin": "//",
                    "end": "$",
                    "contentName": "comment.line.double-slash.text.mapinfolike"
                },
                {
                    "name": "comment.line.semicolon.mapinfolike",
                    "begin": ";",
                    "end": "$",
                    "contentName": "comment.line.semicolon.text.mapinfolike"
                },
                {
                    "name": "comment.block.mapinfolike",
                    "begin": "\\/\\*",
                    "end": "\\*\\/",
                    "contentName": "comment.block.text.mapinfolike"
                }
            ]
        },
        "strings": {
            "patterns": [
                {
                    "name": "string.quoted.double.mapinfolike",
                    "begin": "\"",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.mapinfolike"
                        }
                    },
                    "end": "\"",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.mapinfolike"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#escapes"
                        }
                    ]
                },
                {
                    "name": "string.quoted.single.char.mapinfolike",
                    "begin": "'",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.char.mapinfolike"
                        }
                    },
                    "end": "'",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.char.mapinfolike"
                        }
                    }
                }
            ]
        },
        "escapes": {
            "name": "constant.character.escape.mapinfolike",
            "match": "(\\\\)(?:(?:(x[0-7][\\da-fA-F])|(u(\\{)[\\da-fA-F]{4,6}(\\}))|.))",
            "captures": {
                "1": {
                    "name": "constant.character.escape.backslash.mapinfolike"
                },
                "2": {
                    "name": "constant.character.escape.bit.mapinfolike"
                },
                "3": {
                    "name": "constant.character.escape.unicode.mapinfolike"
                },
                "4": {
                    "name": "constant.character.escape.unicode.punctuation.mapinfolike"
                },
                "5": {
                    "name": "constant.character.escape.unicode.punctuation.mapinfolike"
                }
            }
        },
        "symbols": {
            "patterns": [
                {
                    "name": "keyword.operator.mapinfolike",
                    "match": "\\="
                },
                {
                    "name": "keyword.other.region.start.mapinfolike",
                    "match": "\\#region.*$"
                },
                {
                    "name": "keyword.other.region.end.mapinfolike",
                    "match": "\\#endregion.*$"
                }
            ]
        },
        "innerContextes": {
            "patterns": [
                {
                    "begin": "\\{",
                    "end": "\\}",
                    "beginCaptures": {
                        "0": { "name": "punctuation.bracket.open" }
                    },
                    "endCaptures": {
                        "0": { "name": "punctuation.bracket.close" }
                    },
                    "name": "expression.group",
                    "patterns": [{ "include": "#innerContextPatterns" }]
                }
            ]
        },
        "numbers": {
            "patterns": [
                {
                    "name": "constant.numeric.mapinfolike",
                    "match": "\\b\\d+?\\b"
                },
                {
                    "name": "constant.numeric.decimal.point.mapinfolike",
                    "match": "(?<=[\\d]?)\\.(?=[\\d])"
                }
            ]
        },
        "booleans": {
            "patterns": [
                {
                    "name": "constant.language.boolean.mapinfo",
                    "match": "\\b(?i:true|false)\\b"
                }
            ]
        },
        "parameters": {
            "patterns": [
                {
                    "name": "variable.parameter.mapinfolike",
                    "match": "\\b\\w+?\\b"
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "name": "keyword.operator.mapinfolike",
                    "match": "\\="
                }
            ]
        }
    },
    "scopeName": "source.mapinfolike"
}
